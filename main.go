package main

import (
	"log"
	"os"

	"github.com/s-vvardenfell/Backuper/email"
)

func main() {
	// cmd.Execute()

	os.Setenv("HTTPS_PROXY", "http://127.0.0.1:8888")

	e := email.NewMail("resources/email.json")

	// if err := e.SendPlainMsg("test subject", "test body"); err != nil {
	// 	log.Fatal(err)
	// }

	if err := e.SendMsgWithAttachment("result/file_23.txt"); err != nil {
		log.Fatal(err)
	}
}

/*
TODO

#Архивация
-создание папки с именем архива! и послед-я ее архивация
-общий код в tar и zip - рефакторинг
-gzip для tar-архива/архивов

-сбор нескольких архивов в 1 для tar и zip
пока сделан только сбор в одну папку нескольких архивов и послед-я архивация
если я создаю архив с уникальным именем, то они будут копиться в хранилищах
т.о. надо либо сделать команду на удаление(+) либо просто делать 1 статичное имя и хранить 1 экз в хранилищах (-)

На счет Uploader и Downloader интерфейсов - точно ли они должны возвращать значение? почему не ошибку? как используется это значение?
мб нужно вызывать интерфейс Store который будет сохранять куда-то данные от Uploader
UploadFile подумать чтобы возвращал ошибку, а не просто пустую строку как в telegram!

#Общее
Сообщения об успешной отправке/загрузке везде


dst + "/" + filename
везде где есть "/" нужно заменить вызовом ф-ии из пакета http, которая конкатенирует корректно
сделать тоже для параметров

возможно, download и upload все же должны возвращать ошибку

-переименовать в tegrum + команды
-задачи из todo.txt сюда

tegrum clean //удалит архивы старше, чем опция
tergum retrieve -g -y -t

ФУНКЦИОНАЛ ЗАГРУЗКИ бекап-файлов обратно
и мб даже разархивация в нужные пути но хз, долго

почта должна следовать интерфейсу cloud? она не сможет "загружать" файлы
по сигнатуре тоже не подходит даже под Upload, надо либо в папку clouds перенести, переименовать на storages,
и интерфейс тоже, либо оставить в пакете почты и не юзать интерфейс, в таком случае можно снова объединить интерфейс Cloud в 1

Рефакторинг - конспект

выносить все адреса и тд в константы
url := fmt.Sprintf("%s%s/getFile?file_id=%s", BASE_URL, botToken, fileId) использовать


Config - структура
исп filepath.Abs("config.yaml")

*/
